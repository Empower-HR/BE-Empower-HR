// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	leaves "be-empower-hr/features/Leaves"

	mock "github.com/stretchr/testify/mock"
)

// DataLeavesInterface is an autogenerated mock type for the DataLeavesInterface type
type DataLeavesInterface struct {
	mock.Mock
}

// GetLeaveHistory provides a mock function with given fields: personalDataID, page, pageSize
func (_m *DataLeavesInterface) GetLeaveHistory(personalDataID uint, page int, pageSize int) ([]leaves.LeavesDataEntity, error) {
	ret := _m.Called(personalDataID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaveHistory")
	}

	var r0 []leaves.LeavesDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]leaves.LeavesDataEntity, error)); ok {
		return rf(personalDataID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []leaves.LeavesDataEntity); ok {
		r0 = rf(personalDataID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]leaves.LeavesDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(personalDataID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeaveHistoryEmployee provides a mock function with given fields: personalDataID, page, pageSize
func (_m *DataLeavesInterface) GetLeaveHistoryEmployee(personalDataID uint, page int, pageSize int) ([]leaves.LeavesDataEntity, error) {
	ret := _m.Called(personalDataID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaveHistoryEmployee")
	}

	var r0 []leaves.LeavesDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]leaves.LeavesDataEntity, error)); ok {
		return rf(personalDataID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []leaves.LeavesDataEntity); ok {
		r0 = rf(personalDataID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]leaves.LeavesDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(personalDataID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeavesByDateRange provides a mock function with given fields: personalDataID, startDate, endDate
func (_m *DataLeavesInterface) GetLeavesByDateRange(personalDataID uint, startDate string, endDate string) ([]leaves.LeavesDataEntity, error) {
	ret := _m.Called(personalDataID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetLeavesByDateRange")
	}

	var r0 []leaves.LeavesDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string) ([]leaves.LeavesDataEntity, error)); ok {
		return rf(personalDataID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string) []leaves.LeavesDataEntity); ok {
		r0 = rf(personalDataID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]leaves.LeavesDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(personalDataID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeavesByStatus provides a mock function with given fields: personalDataID, status
func (_m *DataLeavesInterface) GetLeavesByStatus(personalDataID uint, status string) ([]leaves.LeavesDataEntity, error) {
	ret := _m.Called(personalDataID, status)

	if len(ret) == 0 {
		panic("no return value specified for GetLeavesByStatus")
	}

	var r0 []leaves.LeavesDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) ([]leaves.LeavesDataEntity, error)); ok {
		return rf(personalDataID, status)
	}
	if rf, ok := ret.Get(0).(func(uint, string) []leaves.LeavesDataEntity); ok {
		r0 = rf(personalDataID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]leaves.LeavesDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(personalDataID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLeavesDetail provides a mock function with given fields: leaveID
func (_m *DataLeavesInterface) GetLeavesDetail(leaveID uint) (*leaves.LeavesDataEntity, error) {
	ret := _m.Called(leaveID)

	if len(ret) == 0 {
		panic("no return value specified for GetLeavesDetail")
	}

	var r0 *leaves.LeavesDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*leaves.LeavesDataEntity, error)); ok {
		return rf(leaveID)
	}
	if rf, ok := ret.Get(0).(func(uint) *leaves.LeavesDataEntity); ok {
		r0 = rf(leaveID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*leaves.LeavesDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(leaveID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestLeave provides a mock function with given fields: leave
func (_m *DataLeavesInterface) RequestLeave(leave leaves.LeavesDataEntity) error {
	ret := _m.Called(leave)

	if len(ret) == 0 {
		panic("no return value specified for RequestLeave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(leaves.LeavesDataEntity) error); ok {
		r0 = rf(leave)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLeaveStatus provides a mock function with given fields: leaveID, updatesleaves
func (_m *DataLeavesInterface) UpdateLeaveStatus(leaveID uint, updatesleaves leaves.LeavesDataEntity) error {
	ret := _m.Called(leaveID, updatesleaves)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeaveStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, leaves.LeavesDataEntity) error); ok {
		r0 = rf(leaveID, updatesleaves)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataLeavesInterface creates a new instance of DataLeavesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataLeavesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataLeavesInterface {
	mock := &DataLeavesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
