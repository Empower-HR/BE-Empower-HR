// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AccountUtilityInterface is an autogenerated mock type for the AccountUtilityInterface type
type AccountUtilityInterface struct {
	mock.Mock
}

// EmailValidator provides a mock function with given fields: inputEmail
func (_m *AccountUtilityInterface) EmailValidator(inputEmail string) error {
	ret := _m.Called(inputEmail)

	if len(ret) == 0 {
		panic("no return value specified for EmailValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(inputEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmploymentStatusValidator provides a mock function with given fields: status
func (_m *AccountUtilityInterface) EmploymentStatusValidator(status string) error {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for EmploymentStatusValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenderValidator provides a mock function with given fields: gender
func (_m *AccountUtilityInterface) GenderValidator(gender string) error {
	ret := _m.Called(gender)

	if len(ret) == 0 {
		panic("no return value specified for GenderValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(gender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GeneratePassword provides a mock function with given fields: length
func (_m *AccountUtilityInterface) GeneratePassword(length int) (string, error) {
	ret := _m.Called(length)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(length)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobLevelValidator provides a mock function with given fields: level
func (_m *AccountUtilityInterface) JobLevelValidator(level string) error {
	ret := _m.Called(level)

	if len(ret) == 0 {
		panic("no return value specified for JobLevelValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NumberLoop provides a mock function with given fields: n
func (_m *AccountUtilityInterface) NumberLoop(n int) ([]int, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for NumberLoop")
	}

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]int, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordValidator provides a mock function with given fields: inputPassword
func (_m *AccountUtilityInterface) PasswordValidator(inputPassword string) error {
	ret := _m.Called(inputPassword)

	if len(ret) == 0 {
		panic("no return value specified for PasswordValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(inputPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PhoneNumberValidator provides a mock function with given fields: inputHP
func (_m *AccountUtilityInterface) PhoneNumberValidator(inputHP string) error {
	ret := _m.Called(inputHP)

	if len(ret) == 0 {
		panic("no return value specified for PhoneNumberValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(inputHP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReligionValidator provides a mock function with given fields: religion
func (_m *AccountUtilityInterface) ReligionValidator(religion string) error {
	ret := _m.Called(religion)

	if len(ret) == 0 {
		panic("no return value specified for ReligionValidator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(religion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmail provides a mock function with given fields: to, subject, body
func (_m *AccountUtilityInterface) SendEmail(to string, subject string, body string) error {
	ret := _m.Called(to, subject, body)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(to, subject, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountUtilityInterface creates a new instance of AccountUtilityInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountUtilityInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountUtilityInterface {
	mock := &AccountUtilityInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
