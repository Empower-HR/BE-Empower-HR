// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	attendance "be-empower-hr/features/Attendance"

	mock "github.com/stretchr/testify/mock"
)

// AServices is an autogenerated mock type for the AServices type
type AServices struct {
	mock.Mock
}

// AddAtt provides a mock function with given fields: newAtt
func (_m *AServices) AddAtt(newAtt attendance.Attandance) error {
	ret := _m.Called(newAtt)

	if len(ret) == 0 {
		panic("no return value specified for AddAtt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(attendance.Attandance) error); ok {
		r0 = rf(newAtt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountAllAtt provides a mock function with given fields:
func (_m *AServices) CountAllAtt() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountAllAtt")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAllAttbyDate provides a mock function with given fields: date
func (_m *AServices) CountAllAttbyDate(date string) (int64, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for CountAllAttbyDate")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAllAttbyStatus provides a mock function with given fields: status
func (_m *AServices) CountAllAttbyStatus(status string) (int64, error) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for CountAllAttbyStatus")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttByID provides a mock function with given fields: attID
func (_m *AServices) DeleteAttByID(attID uint) error {
	ret := _m.Called(attID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(attID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadAllAtt provides a mock function with given fields:
func (_m *AServices) DownloadAllAtt() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DownloadAllAtt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAtt provides a mock function with given fields: search, limit, offset
func (_m *AServices) GetAllAtt(search string, limit int, offset int) ([]attendance.AttendanceDetail, error) {
	ret := _m.Called(search, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAtt")
	}

	var r0 []attendance.AttendanceDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]attendance.AttendanceDetail, error)); ok {
		return rf(search, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []attendance.AttendanceDetail); ok {
		r0 = rf(search, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.AttendanceDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(search, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAttbyDate provides a mock function with given fields: date, limit, offset
func (_m *AServices) GetAllAttbyDate(date string, limit int, offset int) ([]attendance.AttendanceDetail, error) {
	ret := _m.Called(date, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAttbyDate")
	}

	var r0 []attendance.AttendanceDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]attendance.AttendanceDetail, error)); ok {
		return rf(date, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []attendance.AttendanceDetail); ok {
		r0 = rf(date, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.AttendanceDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(date, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAttbyStatus provides a mock function with given fields: status, limit, offset
func (_m *AServices) GetAllAttbyStatus(status string, limit int, offset int) ([]attendance.AttendanceDetail, error) {
	ret := _m.Called(status, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAttbyStatus")
	}

	var r0 []attendance.AttendanceDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]attendance.AttendanceDetail, error)); ok {
		return rf(status, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []attendance.AttendanceDetail); ok {
		r0 = rf(status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.AttendanceDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(status, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttByIdAtt provides a mock function with given fields: idAtt
func (_m *AServices) GetAttByIdAtt(idAtt uint) ([]attendance.AttendanceDetail, error) {
	ret := _m.Called(idAtt)

	if len(ret) == 0 {
		panic("no return value specified for GetAttByIdAtt")
	}

	var r0 []attendance.AttendanceDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]attendance.AttendanceDetail, error)); ok {
		return rf(idAtt)
	}
	if rf, ok := ret.Get(0).(func(uint) []attendance.AttendanceDetail); ok {
		r0 = rf(idAtt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.AttendanceDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idAtt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttByPersonalID provides a mock function with given fields: personalID, searchBox, limit, offset
func (_m *AServices) GetAttByPersonalID(personalID uint, searchBox string, limit int, offset int) ([]attendance.AttendanceDetail, error) {
	ret := _m.Called(personalID, searchBox, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAttByPersonalID")
	}

	var r0 []attendance.AttendanceDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, int, int) ([]attendance.AttendanceDetail, error)); ok {
		return rf(personalID, searchBox, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, string, int, int) []attendance.AttendanceDetail); ok {
		r0 = rf(personalID, searchBox, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.AttendanceDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, int, int) error); ok {
		r1 = rf(personalID, searchBox, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttByPersonalIDandStatus provides a mock function with given fields: id, status, limit, offset
func (_m *AServices) GetAttByPersonalIDandStatus(id uint, status string, limit int, offset int) ([]attendance.AttendanceDetail, error) {
	ret := _m.Called(id, status, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAttByPersonalIDandStatus")
	}

	var r0 []attendance.AttendanceDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, int, int) ([]attendance.AttendanceDetail, error)); ok {
		return rf(id, status, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, string, int, int) []attendance.AttendanceDetail); ok {
		r0 = rf(id, status, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.AttendanceDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, int, int) error); ok {
		r1 = rf(id, status, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAtt provides a mock function with given fields: id, updateAtt
func (_m *AServices) UpdateAtt(id uint, updateAtt attendance.Attandance) error {
	ret := _m.Called(id, updateAtt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, attendance.Attandance) error); ok {
		r0 = rf(id, updateAtt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAServices creates a new instance of AServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *AServices {
	mock := &AServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
