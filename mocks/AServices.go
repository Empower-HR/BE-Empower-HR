// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	attendance "be-empower-hr/features/Attendance"

	mock "github.com/stretchr/testify/mock"
)

// AServices is an autogenerated mock type for the AServices type
type AServices struct {
	mock.Mock
}

// AddAtt provides a mock function with given fields: newAtt
func (_m *AServices) AddAtt(newAtt attendance.Attandance) error {
	ret := _m.Called(newAtt)

	if len(ret) == 0 {
		panic("no return value specified for AddAtt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(attendance.Attandance) error); ok {
		r0 = rf(newAtt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountAllAtt provides a mock function with given fields:
func (_m *AServices) CountAllAtt() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountAllAtt")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttByID provides a mock function with given fields: attID
func (_m *AServices) DeleteAttByID(attID uint) error {
	ret := _m.Called(attID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(attID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadAllAtt provides a mock function with given fields:
func (_m *AServices) DownloadAllAtt() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DownloadAllAtt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAtt provides a mock function with given fields: limit, offset
func (_m *AServices) GetAllAtt(limit int, offset int) ([]attendance.Attandance, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAtt")
	}

	var r0 []attendance.Attandance
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]attendance.Attandance, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []attendance.Attandance); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.Attandance)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttByPersonalID provides a mock function with given fields: personalID, limit, offset
func (_m *AServices) GetAttByPersonalID(personalID uint, limit int, offset int) ([]attendance.Attandance, error) {
	ret := _m.Called(personalID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAttByPersonalID")
	}

	var r0 []attendance.Attandance
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]attendance.Attandance, error)); ok {
		return rf(personalID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []attendance.Attandance); ok {
		r0 = rf(personalID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]attendance.Attandance)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(personalID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAtt provides a mock function with given fields: id, updateAtt
func (_m *AServices) UpdateAtt(id uint, updateAtt attendance.Attandance) error {
	ret := _m.Called(id, updateAtt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, attendance.Attandance) error); ok {
		r0 = rf(id, updateAtt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAServices creates a new instance of AServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *AServices {
	mock := &AServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
