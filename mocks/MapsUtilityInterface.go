// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MapsUtilityInterface is an autogenerated mock type for the MapsUtilityInterface type
type MapsUtilityInterface struct {
	mock.Mock
}

// GeoCode provides a mock function with given fields: address
func (_m *MapsUtilityInterface) GeoCode(address string) (float64, float64, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GeoCode")
	}

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (float64, float64, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) float64); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(address)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Geolocate provides a mock function with given fields:
func (_m *MapsUtilityInterface) Geolocate() (float64, float64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Geolocate")
	}

	var r0 float64
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func() (float64, float64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func() float64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Haversine provides a mock function with given fields: lat1, lon1, lat2, lon2
func (_m *MapsUtilityInterface) Haversine(lat1 float64, lon1 float64, lat2 float64, lon2 float64) float64 {
	ret := _m.Called(lat1, lon1, lat2, lon2)

	if len(ret) == 0 {
		panic("no return value specified for Haversine")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(float64, float64, float64, float64) float64); ok {
		r0 = rf(lat1, lon1, lat2, lon2)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// NewMapsUtilityInterface creates a new instance of MapsUtilityInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMapsUtilityInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MapsUtilityInterface {
	mock := &MapsUtilityInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
