// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	Announcement "be-empower-hr/features/Announcement"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// AnnoServices is an autogenerated mock type for the AnnoServices type
type AnnoServices struct {
	mock.Mock
}

// AddAnno provides a mock function with given fields: newAnno
func (_m *AnnoServices) AddAnno(newAnno Announcement.Announcement) error {
	ret := _m.Called(newAnno)

	if len(ret) == 0 {
		panic("no return value specified for AddAnno")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Announcement.Announcement) error); ok {
		r0 = rf(newAnno)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *AnnoServices) GetAll() ([]Announcement.Announcement, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []Announcement.Announcement
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Announcement.Announcement, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Announcement.Announcement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Announcement.Announcement)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLAtc provides a mock function with given fields: file, filename
func (_m *AnnoServices) GetURLAtc(file io.Reader, filename string) (string, error) {
	ret := _m.Called(file, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetURLAtc")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, string) (string, error)); ok {
		return rf(file, filename)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, string) string); ok {
		r0 = rf(file, filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(io.Reader, string) error); ok {
		r1 = rf(file, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAnnoServices creates a new instance of AnnoServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnnoServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnnoServices {
	mock := &AnnoServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
