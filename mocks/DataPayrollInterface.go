// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	payroll "be-empower-hr/features/Payroll"

	mock "github.com/stretchr/testify/mock"
)

// DataPayrollInterface is an autogenerated mock type for the DataPayrollInterface type
type DataPayrollInterface struct {
	mock.Mock
}

// CreatePayroll provides a mock function with given fields: _a0
func (_m *DataPayrollInterface) CreatePayroll(_a0 payroll.PayrollDataEntity) (payroll.PayrollDataEntity, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayroll")
	}

	var r0 payroll.PayrollDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(payroll.PayrollDataEntity) (payroll.PayrollDataEntity, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(payroll.PayrollDataEntity) payroll.PayrollDataEntity); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(payroll.PayrollDataEntity)
	}

	if rf, ok := ret.Get(1).(func(payroll.PayrollDataEntity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPayroll provides a mock function with given fields:
func (_m *DataPayrollInterface) GetAllPayroll() ([]payroll.PayrollResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllPayroll")
	}

	var r0 []payroll.PayrollResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]payroll.PayrollResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []payroll.PayrollResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]payroll.PayrollResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmpById provides a mock function with given fields: employee
func (_m *DataPayrollInterface) GetEmpById(employee uint) (payroll.EmploymentDataEntity, error) {
	ret := _m.Called(employee)

	if len(ret) == 0 {
		panic("no return value specified for GetEmpById")
	}

	var r0 payroll.EmploymentDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (payroll.EmploymentDataEntity, error)); ok {
		return rf(employee)
	}
	if rf, ok := ret.Get(0).(func(uint) payroll.EmploymentDataEntity); ok {
		r0 = rf(employee)
	} else {
		r0 = ret.Get(0).(payroll.EmploymentDataEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(employee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayrollDownload provides a mock function with given fields: ID
func (_m *DataPayrollInterface) GetPayrollDownload(ID uint) (payroll.PayrollResponsePDF, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetPayrollDownload")
	}

	var r0 payroll.PayrollResponsePDF
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (payroll.PayrollResponsePDF, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(uint) payroll.PayrollResponsePDF); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(payroll.PayrollResponsePDF)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataPayrollInterface creates a new instance of DataPayrollInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataPayrollInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataPayrollInterface {
	mock := &DataPayrollInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
