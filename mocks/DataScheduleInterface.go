// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	schedule "be-empower-hr/features/Schedule"

	mock "github.com/stretchr/testify/mock"
)

// DataScheduleInterface is an autogenerated mock type for the DataScheduleInterface type
type DataScheduleInterface struct {
	mock.Mock
}

// CreateSchedule provides a mock function with given fields: _a0
func (_m *DataScheduleInterface) CreateSchedule(_a0 schedule.ScheduleDataEntity) (uint, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchedule")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(schedule.ScheduleDataEntity) (uint, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(schedule.ScheduleDataEntity) uint); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(schedule.ScheduleDataEntity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchedule provides a mock function with given fields: scheduleid
func (_m *DataScheduleInterface) DeleteSchedule(scheduleid uint) error {
	ret := _m.Called(scheduleid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(scheduleid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSchedule provides a mock function with given fields:
func (_m *DataScheduleInterface) GetAllSchedule() ([]schedule.ScheduleDataEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllSchedule")
	}

	var r0 []schedule.ScheduleDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]schedule.ScheduleDataEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []schedule.ScheduleDataEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedule.ScheduleDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduleById provides a mock function with given fields: scheduleid
func (_m *DataScheduleInterface) GetScheduleById(scheduleid uint) (*schedule.ScheduleDataEntity, error) {
	ret := _m.Called(scheduleid)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduleById")
	}

	var r0 *schedule.ScheduleDataEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*schedule.ScheduleDataEntity, error)); ok {
		return rf(scheduleid)
	}
	if rf, ok := ret.Get(0).(func(uint) *schedule.ScheduleDataEntity); ok {
		r0 = rf(scheduleid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*schedule.ScheduleDataEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(scheduleid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSchedule provides a mock function with given fields: scheduleid, account
func (_m *DataScheduleInterface) UpdateSchedule(scheduleid uint, account schedule.ScheduleDataEntity) error {
	ret := _m.Called(scheduleid, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, schedule.ScheduleDataEntity) error); ok {
		r0 = rf(scheduleid, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDataScheduleInterface creates a new instance of DataScheduleInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataScheduleInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataScheduleInterface {
	mock := &DataScheduleInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
