// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	attendance "be-empower-hr/features/Attendance"

	mock "github.com/stretchr/testify/mock"

	payroll "be-empower-hr/features/Payroll"
)

// PdfUtilityInterface is an autogenerated mock type for the PdfUtilityInterface type
type PdfUtilityInterface struct {
	mock.Mock
}

// DownloadPdf provides a mock function with given fields: items, filename
func (_m *PdfUtilityInterface) DownloadPdf(items []attendance.Attandance, filename string) error {
	ret := _m.Called(items, filename)

	if len(ret) == 0 {
		panic("no return value specified for DownloadPdf")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]attendance.Attandance, string) error); ok {
		r0 = rf(items, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadPdfPayroll provides a mock function with given fields: item, filename
func (_m *PdfUtilityInterface) DownloadPdfPayroll(item payroll.PayrollResponsePDF, filename string) error {
	ret := _m.Called(item, filename)

	if len(ret) == 0 {
		panic("no return value specified for DownloadPdfPayroll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(payroll.PayrollResponsePDF, string) error); ok {
		r0 = rf(item, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadPdf provides a mock function with given fields: url, filePath
func (_m *PdfUtilityInterface) UploadPdf(url string, filePath string) error {
	ret := _m.Called(url, filePath)

	if len(ret) == 0 {
		panic("no return value specified for UploadPdf")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(url, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPdfUtilityInterface creates a new instance of PdfUtilityInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPdfUtilityInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PdfUtilityInterface {
	mock := &PdfUtilityInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
